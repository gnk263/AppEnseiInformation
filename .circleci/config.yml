version: 2.1
executors:
  my-executor:
    docker:
      - image: circleci/python:3.7.2
        environment:
          PIPENV_VENV_IN_PROJECT: true
    working_directory: ~/work
 
commands:
  restore:
    steps:
      - restore_cache:
          key: work-v2-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
 
  save:
    steps:
      - save_cache:
          paths:
            - ".venv"
          key: work-v2-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
 
  deploy:
    parameters:
      env:
        type: enum
        enum: ["prod", "dev"]
    steps:
      - checkout
      - restore
      - run:
          name: deploy
          command: |
            # TODO: 暫定
            python -m venv .venv
            source .venv/bin/activate
            sudo pip install pipenv
            pipenv install

            source .venv/bin/activate
 
            aws --version
 
            echo << parameters.env >>
 
            if [ << parameters.env >> = "dev" ]; then
              export ENV=<< parameters.env >>
              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_DEV
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_DEV
              export AWS_DEPLOY_IAM_ROLE_ARN=$AWS_DEPLOY_IAM_ROLE_ARN_DEV
              export AWS_DEPLOY_IAM_ROLE_EXTERNAL_ID=$AWS_DEPLOY_IAM_ROLE_EXTERNAL_ID_DEV
            else
              export ENV=<< parameters.env >>
              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD
              export AWS_DEPLOY_IAM_ROLE_ARN=$AWS_DEPLOY_IAM_ROLE_ARN_PROD
              export AWS_DEPLOY_IAM_ROLE_EXTERNAL_ID=$AWS_DEPLOY_IAM_ROLE_EXTERNAL_ID_PROD
            fi
            export ROLE_SESSION_NAME=deploy-$ENV

            ./assume_role.sh
            source aws-env.sh
 
            make deploy

jobs:
  setup:
    executor: my-executor
    steps:
      - checkout
      - restore
      - run:
          name: install
          command: |
            python -m venv .venv
            source .venv/bin/activate
            sudo pip install pipenv
            pipenv install
      - save
 
  test:
    executor: my-executor
    steps:
      - checkout
      - restore
      - run:
          name: test
          command: |
            # TODO: 暫定
            python -m venv .venv
            source .venv/bin/activate
            sudo pip install pipenv
            pipenv install

            source .venv/bin/activate
            make test-json
 
  deploy_dev:
    executor: my-executor
    steps:
      - checkout
      - restore
      - deploy:
          env: dev
 
  deploy_prod:
    executor: my-executor
    steps:
      - checkout
      - restore
      - deploy:
          env: prod
 
workflows:
  version: 2.1
  release-workflow:
    jobs:
      - setup:
          filters:
            branches:
              only:
                - master
      - test:
          requires:
            - setup
          filters:
            branches:
              only:
                - master
      - deploy_dev:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - approve_for_prod:
          type: approval
          requires:
            - deploy_dev
          filters:
            branches:
              only:
                - master
      - deploy_prod:
          requires:
            - approve_for_prod
          filters:
            branches:
              only:
                - master
